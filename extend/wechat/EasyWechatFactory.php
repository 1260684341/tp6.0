<?php
namespace wechat;

use EasyWeChat\Factory;

class EasyWechatFactory extends Factory
{

    public static $config = [
        // 测试运行配置
        'test' => [
            'gzh' => [
                'app_id' => '',
                'secret' => '',
                'token' => '',
                'response_type' => 'array',
            ],
            'xcx' => [
                'app_id' => '',
                'secret' => '',
            ],
            'app' => [
                'app_id' => '',
                'secret' => '',
            ],
            'h5' => [
                'app_id' => '',
                'secret' => '',
            ],
            'native' => [
                'app_id' => '',
                'secret' => '',
            ],
            'pay' => [
                'mch_id'             => '', //商户号
                'key'                => '', //api密钥
                'cert_path'          => '',
                'key_path'           => '',
                'notify_url'         => 'https://host/index.php/notify/Index/wxPayNotify',
                'refund_notify_url'  => 'https://host/index.php/notify/Index/wxRefundNotify',
            ],
        ],

        // 正式运行配置
        'product' => [
            'gzh' => [
                'app_id' => '',
                'secret' => '',
                'token' => '',
                'response_type' => 'array',  // 指定 API 调用返回结果的类型：array(default)/collection/object/raw/自定义类名
            ],
            'xcx' => [
                'app_id' => '',
                'secret' => '',
            ],
            'app' => [
                'app_id' => '',
                'secret' => '',
            ],
            'h5' => [
                'app_id' => '',
                'secret' => '',
            ],
            'native' => [
                'app_id' => '',
                'secret' => '',
            ],
			'pay' => [
				'mch_id'             => '', //商户号
				'key'                => '', //api密钥
				'cert_path'          => '',
				'key_path'           => '',
                'notify_url'         => 'https://host/index.php/notify/Index/wxPayNotify',
                'refund_notify_url'  => 'https://host/index.php/notify/Index/wxRefundNotify',
			],
        ],
    ];

    const PAY_TYPE_GZH = 'gzh';
    const PAY_TYPE_H5 = 'h5';
    const PAY_TYPE_XCX = 'xcx';
    const PAY_TYPE_APP = 'app';
    const PAY_TYPE_NATIVE = 'native';


    public static function officialAccount(array $config = [])
    {
        $config = self::getConfig('gzh', $config);
        return parent::officialAccount($config);
    }

    public static function miniProgram(array $config = [])
    {
        $config = self::getConfig('xcx', $config);
        return parent::miniProgram($config);
    }


    public static function payment($pay_type_or_config)
    {
        if (is_string($pay_type_or_config)) {
            $pay_type = $pay_type_or_config;
            if ($pay_type == self::PAY_TYPE_GZH) {
                $app_id = self::getConfig('gzh')['app_id'];
            }
            elseif ($pay_type == self::PAY_TYPE_XCX) {
                $app_id = self::getConfig('xcx')['app_id'];
            }
            elseif ($pay_type == self::PAY_TYPE_H5) {
                $app_id = self::getConfig('h5')['app_id'];
            }
            elseif ($pay_type == self::PAY_TYPE_APP) {
                $app_id = self::getConfig('app')['app_id'];
            }
            elseif ($pay_type == self::PAY_TYPE_NATIVE) {
                $app_id = self::getConfig('native')['app_id'];
            }
            else {
                $app_id = '';
            }

            $config = self::getConfig('pay', [
                'app_id' => $app_id
            ]);
        }
        elseif (is_array($pay_type_or_config)){
            $config = $pay_type_or_config;
        }
        else {
            return null;
        }
        return parent::payment($config);
    }

    public static function getTradeType($pay_type)
    {
        switch ($pay_type) {
            case self::PAY_TYPE_GZH:
                $trade_type = "JSAPI";
                break;
            case self::PAY_TYPE_XCX:
                $trade_type = "JSAPI";
                break;
            case self::PAY_TYPE_H5:
                $trade_type = "MWEB";
                break;
            case self::PAY_TYPE_APP:
                $trade_type = "APP";
                break;
            case self::PAY_TYPE_NATIVE:
                $trade_type = "NATIVE";
                break;
            default:
                $trade_type = '';
                break;
        }
        return $trade_type;
    }

    public static function basicService(array $config)
    {
        return parent::basicService($config); // TODO: Change the autogenerated stub
    }

    public static function openWork(array $config)
    {
        return parent::openWork($config); // TODO: Change the autogenerated stub
    }

    public static function microMerchant(array $config)
    {
        return parent::microMerchant($config); // TODO: Change the autogenerated stub
    }

    public static function openPlatform(array $config)
    {
        return parent::openPlatform($config); // TODO: Change the autogenerated stub
    }

    public static function work(array $config)
    {
        return parent::work($config); // TODO: Change the autogenerated stub
    }

    public static function make($name, array $config)
    {
        return parent::make($name, $config); // TODO: Change the autogenerated stub
    }

    /**
     * @return array
     */
    public static function getConfig($key, $config = [])
    {
        if (app()->isDebug()) {
            $config = array_merge(self::$config['test'][$key], $config);
        }
        else {
            $config = array_merge(self::$config['product'][$key], $config);
        }

        return $config;
    }


}